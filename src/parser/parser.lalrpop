use crate::parser::{
	LexicalError,
	Location,
	lexer::Tok,
	point::Point,
};
use crate::ast::{
    parsed::{
		Attr,
		Attrs,
		Content,
		MultiLineComment,
		MultiLineCommentPart,
		ParsedFile,
	},
	Par, ParPart
};

grammar<'input>;

pub File: ParsedFile<'input> = {
    FileContent => <>.into(),
};

FileContent: Vec<Par<ParPart<Content<'input>>>> = {
	MaybeSepList<Par, ParBreak>
}

Par: Par<ParPart<Content<'input>>> = {
	ParPart+ => <>.into(),
}

ParPart: ParPart<Content<'input>> = {
	<MaybeLineContent> "\n" => ParPart::Line(<>),

	<l:@L> <name:Command> <attrs:Attrs?> <inline_args:("{" <MaybeLineContent> "}")*> ":" "\n" <trail_head:Indented<FileContent>> <trail_tail:("::" "\n" <Indented<FileContent>>)*> <r:@R> => {
		ParPart::Command(Content::Command {
			name: name.into(),
			attrs,
			inline_args,
			remainder_arg: None,
			trailer_args: {
				let mut args = vec![trail_head];
				args.extend(trail_tail);
				args
			},
			loc: Location::new(l, r),
		})
	},
}

MaybeLineContent: Vec<Content<'input>> = {
	LineContent? => <>.unwrap_or_default()
}

LineContent: Vec<Content<'input>> = {
	LineElement+,
	<mut content:LineElement*> <tail:RemainderCommand> => {
		content.push(tail);
		content
	},
}

RemainderCommand: Content<'input> = {
	<l:@L> <name:Command> <attrs:Attrs?> <inline_args:("{" <MaybeLineContent> "}")*> <remainder_arg:(":" <LineContent>)> <r:@R> => Content::Command {
		name: name.into(),
		attrs,
		inline_args,
		remainder_arg: Some(remainder_arg),
		trailer_args: Vec::with_capacity(0),
		loc: Location::new(l, r),
	}
}

LineElement: Content<'input> = {
	Comment       => Content::Comment(<>),
	NestedComment => Content::MultiLineComment(<>),
	Whitespace    => Content::Whitespace(<>),
	Word          => Content::Word(<>.into()),
	Dash          => Content::Dash(<>.into()),
	Glue          => Content::Glue(<>.into()),
	Verbatim      => Content::Verbatim(<>),

	<l:@L> <name: Command> <attrs:Attrs?> <inline_args:("{" <MaybeLineContent> "}")*> <r:@R> => Content::Command {
		name: name.into(),
		attrs,
		inline_args,
		remainder_arg: None,
		trailer_args: Vec::with_capacity(0),
		loc: Location::new(l, r),
	},
}

Attrs: Attrs<'input> = {
	"[" <MaybeSepList<Attr, ",">> "]" => Attrs::new(<>),
}

Attr: Attr<'input> = {
	NamedAttr => Attr::named(<>),
	UnnamedAttr => Attr::unnamed(<>),
};

NestedComment: MultiLineComment<'input> = {
	"/*" <NestedCommentContent> "*/"
}

NestedCommentContent: MultiLineComment<'input> = {
	<NestedCommentPart*> => MultiLineComment(<>),
}

NestedCommentPart: MultiLineCommentPart<'input> = {
	"\n"          => MultiLineCommentPart::Newline,
	Comment       => MultiLineCommentPart::Comment(<>),
	NestedComment => MultiLineCommentPart::Nested(<>),
}

SepList<T,Sep>: Vec<T> = {
	<head:T> <mut tail:MaybeSepList<T,Sep>> => {
		let mut ret = vec![head];
		ret.append(&mut tail);
		ret
	}
}

MaybeSepList<T, Sep>: Vec<T> = {
	<mut init:(<T> Sep)*> <last:T?> => match last {
		None => init,
		Some(e) => {
			init.push(e);
			init
		}
	},
}

Indented<T>: T = {
	Indent <MaybeIndented<T>> Dedent,
}

MaybeIndented<T>: T = {
	T,
	Indent <MaybeIndented<T>> Dedent,
}

extern {
	type Location = Point<'input>;
	type Error = LexicalError<'input>;

	enum Tok<'input> {
		Indent      => Tok::Indent,
		Dedent      => Tok::Dedent,
		":"         => Tok::Colon,
		"::"        => Tok::DoubleColon,
		"{"         => Tok::LBrace,
		"}"         => Tok::RBrace,
		Command     => Tok::Command(<&'input str>),
		ParBreak    => Tok::ParBreak,
		Word        => Tok::Word(<&'input str>),
		Dash        => Tok::Dash(<&'input str>),
		Glue        => Tok::Glue(<&'input str>),
		Verbatim    => Tok::Verbatim(<&'input str>),
		Whitespace  => Tok::Whitespace(<&'input str>),
		"["         => Tok::LBracket,
		"]"         => Tok::RBracket,
		","         => Tok::AttrComma,
		NamedAttr   => Tok::NamedAttr(<&'input str>),
		UnnamedAttr => Tok::UnnamedAttr(<&'input str>),
		"/*"        => Tok::NestedCommentOpen,
		"*/"        => Tok::NestedCommentClose,
		"\n"        => Tok::Newline,
		Comment     => Tok::Comment(<&'input str>),
	}
}
