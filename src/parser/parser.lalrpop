use crate::parser::{Location, LexicalError, lexer::Tok};
use crate::ast::{
    parsed::{MultiLineComment, MultiLineCommentPart, Content},
    File, Par, Line, Text,
};
use crate::context::Context;
use std::error::Error;

grammar<'input>;

pub File: File<Content<'input>> = {
	<MaybeSepList<Par, ParBreak>> Eof? => File { pars: <> },
};

Par: Par<Content<'input>> = {
	Line+ => Par { lines: <> }
}

Line: Line<Content<'input>> = {
	<LineContent> "\n"
}

Eol: () = {
	"\n"
	Eof
}

LineContent: Line<Content<'input>> = {
	MaybeSepList<LineElement, Whitespace> => Line { content: <> }
}

LineElement: Content<'input> = {
	NestedComment => Content::MultiLineComment(<>),
	// !             => {
	// 	errors.push("something went wrong");
	// 	Content::Error
	// }
}

// Args = {
// 	("{" <Content+> "}")* (":" <Indented<ParContent>> ("::" <Indented<ParContent>>)*)?
// }

NestedComment: MultiLineComment<'input> = {
	"/*" <NestedCommentContent> "*/"
}

NestedCommentContent: MultiLineComment<'input> = {
	<NestedCommentPart*> => MultiLineComment(<>),
}

NestedCommentPart: MultiLineCommentPart<'input> = {
	"\n"                                 => MultiLineCommentPart::Newline,
	Comment                              => MultiLineCommentPart::Comment(<>),
	NestedComment                        => MultiLineCommentPart::Nested(<>),
}

SepList<T,Sep>: Vec<T> = {
	<head:T> <mut tail:MaybeSepList<T,Sep>> => {
		let mut ret = vec![head];
		ret.append(&mut tail);
		ret
	}
}

MaybeSepList<T, Sep>: Vec<T> = {
	<mut init:(<T> Sep)*> <last:T?> => match last {
		None => init,
		Some(e) => {
			init.push(e);
			init
		}
	},
}

Indented<T>: T = {
	Indent <MaybeIndented<T>> Dedent,
}

MaybeIndented<T>: T = {
	T,
	Indent <MaybeIndented<T>> Dedent,
}

extern {
	type Location = Location<'input>;
	type Error = LexicalError<'input>;

	enum Tok<'input> {
		Indent     => Tok::Indent,
		Dedent     => Tok::Dedent,
		":"        => Tok::Colon,
		"::"       => Tok::DoubleColon,
		"{"        => Tok::LBrace,
		"}"        => Tok::RBrace,
		Command    => Tok::Command(<&'input str>),
		ParBreak   => Tok::ParBreak,
		Word       => Tok::Word(<&'input str>),
		Whitespace => Tok::Whitespace(<&'input str>),
		"/*"       => Tok::NestedCommentOpen,
		"*/"       => Tok::NestedCommentClose,
		"\n"       => Tok::Newline,
		Comment    => Tok::Comment(<&'input str>),
		Eof        => Tok::Eof,
	}
}
