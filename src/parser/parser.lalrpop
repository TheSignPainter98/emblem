use crate::parser::{
	LexicalError,
	Location,
	lexer::Tok,
	point::Point,
};
use crate::ast::{
    parsed::{
		Attr,
		Attrs,
		Content,
		MultiLineComment,
		MultiLineCommentPart,
		ParsedFile,
		Sugar,
	},
	Par, ParPart, Text
};

grammar<'input>;

pub File: ParsedFile<'input> = {
    FileContent => <>.into(),
};

FileContent: Vec<Par<ParPart<Content<'input>>>> = {
	MaybeSepList<Par, ParBreak>
}

Par: Par<ParPart<Content<'input>>> = {
	ParPart+ => <>.into(),
}

ParPart: ParPart<Content<'input>> = {
	<MaybeLineContent> "\n" => ParPart::Line(<>),

	<l:@L> <name:CommandName> <attrs:Attrs?> <inline_args:("{" <MaybeLineContent> "}")*> ":" "\n" <trail_head:Indented<FileContent>> <trail_tail:("::" "\n" <Indented<FileContent>>)*> <r:@R> => {
		ParPart::Command(Content::Command {
			name: name.0,
			pluses: name.1,
			attrs,
			inline_args,
			remainder_arg: None,
			trailer_args: {
				let mut args = vec![trail_head];
				args.extend(trail_tail);
				args
			},
			loc: Location::new(&l, &r),
			invocation_loc: name.2,
		})
	},
}

MaybeLineContent: Vec<Content<'input>> = {
	LineContent? => <>.unwrap_or_default()
}

LineContent: Vec<Content<'input>> = {
	LineElement+,
	<mut content:LineElement*> <tail:RemainderCommand> => {
		content.push(tail);
		content
	},
}

RemainderCommand: Content<'input> = {
	<l:@L> <name:CommandName> <attrs:Attrs?> <inline_args:("{" <MaybeLineContent> "}")*> <remainder_arg:(":" <LineContent>)> <r:@R> => Content::Command {
		name: name.0,
		pluses: name.1,
		attrs,
		inline_args,
		remainder_arg: Some(remainder_arg),
		trailer_args: Vec::with_capacity(0),
		loc: Location::new(&l, &r),
		invocation_loc: name.2,
	}
}

CommandName: (Text<'input>, usize, Location<'input>) = {
	<l:@L> <command:Command> <r:@R> => (command.0.into(), command.1.into(), Location::new(&l, &r)),
}

LineElement: Content<'input> = {
	<l:@L> <comment:Comment>       <r:@R> => Content::Comment{ comment, loc: Location::new(&l, &r) },
	<l:@L> <content:NestedComment> <r:@R> => Content::MultiLineComment{ content, loc: Location::new(&l, &r) },
	<l:@L> <whitespace:Whitespace> <r:@R> => Content::Whitespace{ whitespace, loc: Location::new(&l, &r) },
	<l:@L> <word:Word>             <r:@R> => Content::Word{ word: word.into(), loc: Location::new(&l, &r) },
	<l:@L> <dash:Dash>             <r:@R> => Content::Dash{ dash: dash.into(), loc: Location::new(&l, &r) },
	<l:@L> <glue:Glue>             <r:@R> => Content::Glue{ glue: glue.into(), loc: Location::new(&l, &r) },
	<l:@L> <verbatim:Verbatim>     <r:@R> => Content::Verbatim{ verbatim, loc: Location::new(&l, &r) },

	EmphSugar,

	<l:@L> <name:CommandName> <attrs:Attrs?> <inline_args:("{" <MaybeLineContent> "}")*> <r:@R> => Content::Command {
		name: name.0,
		pluses: name.1,
		attrs,
		inline_args,
		remainder_arg: None,
		trailer_args: Vec::with_capacity(0),
		loc: Location::new(&l, &r),
		invocation_loc: name.2,
	},
}

EmphSugar: Content<'input> = {
	<l:@L> <delimiter:ItalicOpen> <arg:LineElement+> ItalicClose <r:@R> => Content::Sugar(
		Sugar::Italic{
			delimiter,
			arg,
			loc: Location::new(&l, &r),
		},
	),
	<l:@L> <delimiter:BoldOpen> <arg:LineElement+> BoldClose <r:@R> => Content::Sugar(
		Sugar::Bold{
			delimiter,
			arg,
			loc: Location::new(&l, &r),
		},
	),
	<l:@L> <delimiter:MonospaceOpen> <arg:LineElement+> MonospaceClose <r:@R> => Content::Sugar(
		Sugar::Monospace{
			delimiter,
			arg,
			loc: Location::new(&l, &r),
		},
	),
	<l:@L> <delimiter:SmallcapsOpen> <arg:LineElement+> SmallcapsClose <r:@R> => Content::Sugar(
		Sugar::Smallcaps{
			delimiter,
			arg,
			loc: Location::new(&l, &r),
		},
	),
	<l:@L> <delimiter:AlternateFaceOpen> <arg:LineElement+> AlternateFaceClose <r:@R> => Content::Sugar(
		Sugar::AlternateFace{
			delimiter,
			arg,
			loc: Location::new(&l, &r),
		},
	),
}

Attrs: Attrs<'input> = {
	<l:@L> "[" <attrs:MaybeSepList<Attr, ",">> "]" <r:@R> => Attrs::new(attrs, Location::new(&l, &r)),
}

Attr: Attr<'input> = {
	<l:@L> <attr:NamedAttr> <r:@R> => Attr::named(attr, Location::new(&l, &r)),
	<l:@L> <attr:UnnamedAttr> <r:@R> => Attr::unnamed(attr, Location::new(&l, &r)),
};

NestedComment: MultiLineComment<'input> = {
	"/*" <NestedCommentContent> "*/"
}

NestedCommentContent: MultiLineComment<'input> = {
	<NestedCommentPart*> => MultiLineComment(<>),
}

NestedCommentPart: MultiLineCommentPart<'input> = {
	"\n"          => MultiLineCommentPart::Newline,
	Comment       => MultiLineCommentPart::Comment(<>),
	NestedComment => MultiLineCommentPart::Nested(<>),
}

SepList<T,Sep>: Vec<T> = {
	<head:T> <mut tail:MaybeSepList<T,Sep>> => {
		let mut ret = vec![head];
		ret.append(&mut tail);
		ret
	}
}

MaybeSepList<T, Sep>: Vec<T> = {
	<mut init:(<T> Sep)*> <last:T?> => match last {
		None => init,
		Some(e) => {
			init.push(e);
			init
		}
	},
}

Indented<T>: T = {
	Indent <MaybeIndented<T>> Dedent,
}

MaybeIndented<T>: T = {
	T,
	Indent <MaybeIndented<T>> Dedent,
}

extern {
	type Location = Point<'input>;
	type Error = LexicalError<'input>;

	enum Tok<'input> {
		Indent             => Tok::Indent,
		Dedent             => Tok::Dedent,
		":"                => Tok::Colon,
		"::"               => Tok::DoubleColon,
		"{"                => Tok::LBrace,
		"}"                => Tok::RBrace,
		Command            => Tok::Command(<&'input str>, <usize>),
		ItalicOpen         => Tok::ItalicOpen(<&'input str>),
		BoldOpen           => Tok::BoldOpen(<&'input str>),
		MonospaceOpen      => Tok::MonospaceOpen(<&'input str>),
		SmallcapsOpen      => Tok::SmallcapsOpen(<&'input str>),
		AlternateFaceOpen  => Tok::AlternateFaceOpen(<&'input str>),
		ItalicClose        => Tok::ItalicClose,
		BoldClose          => Tok::BoldClose,
		MonospaceClose     => Tok::MonospaceClose,
		SmallcapsClose     => Tok::SmallcapsClose,
		AlternateFaceClose => Tok::AlternateFaceClose,
		ParBreak           => Tok::ParBreak,
		Word               => Tok::Word(<&'input str>),
		Dash               => Tok::Dash(<&'input str>),
		Glue               => Tok::Glue(<&'input str>),
		Verbatim           => Tok::Verbatim(<&'input str>),
		Whitespace         => Tok::Whitespace(<&'input str>),
		"["                => Tok::LBracket,
		"]"                => Tok::RBracket,
		","                => Tok::AttrComma,
		NamedAttr          => Tok::NamedAttr(<&'input str>),
		UnnamedAttr        => Tok::UnnamedAttr(<&'input str>),
		"/*"               => Tok::NestedCommentOpen,
		"*/"               => Tok::NestedCommentClose,
		"\n"               => Tok::Newline,
		Comment            => Tok::Comment(<&'input str>),
	}
}
