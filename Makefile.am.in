#!/usr/bin/automake

.DEFAULT_GOAL = all-am

MKDIR_P = mkdir -m 755 -p

FORMATTER = clang-format
FORMAT_FLAGS = -Werror -i
FORMAT_CHECKER = clang-format
FORMAT_CHECKER_FLAGS = -Werror -i --dry-run
LINTER = clang-tidy
LINTER_FLAGS = --use-color --quiet --line-filter="$$(cat clang-tidy-info.json)"
LINTER_COMPILE_FLAGS = $(CFLAGS_ALL) -Isrc/ -fblocks
LINTER_APPLY_CHANGES_FLAGS = --fix --fix-errors
LINTER_OUTPUT_FILTER = | (grep -v '^[0-9]* warnings*' || true)
ROFF = groff
ROFF_FLAGS = -man -fN -Tpdf

SUFFIXES = .moon .lc .Po

# libtool flags
ACLOCAL_AMFLAGS = -I m4
AM_YFLAGS = -d
AM_LIBTOOLFLAGS = --quiet

M4 = m4 -P
M4FLAGS = -E

EM_LEX_PREFIX = em_

BUILT_SOURCES = src/parser/emblem-parser.h src/parser/emblem-lexer.h src/ext/lua-lib-load.c ./src/pp/ignore_warning.h S_BUILT_SRCS

PATH_DECLS = -DDATA_DIR=\"$(pkgdatadir)\" -DINCLUDE_DIR=\"$(pkgincludedir)\" -DLIB_DIR=\"$(pkglibdir)\" -DLIB_EXEC_DIR=\"$(pkglibexecdir)\"
CFLAGS_ALL = -Wall -Wextra -Wpedantic -Werror -pedantic-errors -std=gnu2x $(PATH_DECLS) -pthread -fstack-protector
LDADD_ALL = -lm -ldl
LFLAGS_ALL = -Cfar
YFLAGS_ALL = -Wall -Wdangling-alias -Wno-yacc -Wcounterexamples -Werror -LC --locations -l -d -rall

if ANALYZER
CFLAGS_ANALYSER = -fanalyzer
else
CFLAGS_ANALYSER =
endif

# Binary and sources
bin_PROGRAMS = em
em_SOURCES = S_SRC_FILES
em_CFLAGS = $(CFLAGS_ALL) S_DEPS_CFLAGS $(CFLAGS_ANALYSER)
em_LDADD = $(LDADD_ALL) S_DEPS_LIBS
em_LFLAGS = $(LFLAGS_ALL)
em_YFLAGS = $(YFLAGS_ALL)
dist_man_MANS = em.1

LEX = flex

define moon2c
	(awk -f scripts/moon-module-make.awk -v module_name="$(shell scripts/module_name $<)" | moonc -- | luac -o - - | ./scripts/bin2c.lua /dev/stdin $(shell scripts/module_name $<)) < $< > $@
endef

src/ext/lua-lib-load.c: scripts/lua-lib-load.c.sh
	. $< > $@

%.lc: %.moon scripts/bin2c.lua scripts/module_name
	$(moon2c)

src/argp.h: src/argp.c
src/argp.h src/argp.c: em.yml ./scripts/arggen
	./scripts/arggen -xc ./src/argp < $<

./src/pp/ignore_warning.h: ./src/pp/ignore_warning.h.m4
	$(M4) $(M4FLAGS) $< > $@

src/parser/emblem-parser.h: src/parser/em-emblem-parser.h
	cp $< $@

src/parser/emblem-lexer.h: src/parser/emblem-lexer.c

em.yml:;

# Add documentation
dist_doc_DATA = README.md LICENSE ChangeLog

ChangeLog: ./scripts/changelog.sh
	. $< > $@

./em.1.gz: ./em.1
	gzip -9c $< > $@

./em.1: ./em.yml ./scripts/mangen
	./scripts/mangen < $< > $@

command-line-manual.pdf: em.1
	$(ROFF) $(ROFF_FLAGS) $< > $@

# Add tests
TESTS = check_em
check_PROGRAMS = check_em
check_em_SOURCES = S_TEST_FILES
check_em_CFLAGS = $(CFLAGS_ALL) S_CHECK_DEPS_CFLAGS $(CFLAGS_ANALYSER)
check_em_LDADD = $(LDADD_ALL) S_CHECK_DEPS_LIBS
check_em_LFLAGS = $(LFLAGS_ALL)
check_em_YFLAGS = $(YFLAGS_ALL)

doc: docs/html/index.html
.PHONY: doc

doc-coverage: scripts/doxcov docs/html/index.html
	./scripts/doxcov
.PHONY: doc-coverage

lint: .clang-tidy clang-tidy-info.json S_LINTABLE_SRCS
	@$(LINTER) $(LINTER_FLAGS) $(filter %.c,$^) -- $(LINTER_COMPILE_FLAGS) 2>&1 $(LINTER_OUTPUT_FILTER)
.PHONY: lint

lint-fix: .clang-tidy clang-tidy-info.json S_LINTABLE_SRCS
	@$(LINTER) $(LINTER_FLAGS) $(LINTER_APPLY_CHANGES_FLAGS) $(filter %.c,$^) -- $(LINTER_COMPILE_FLAGS) 2>&1 $(LINTER_OUTPUT_FILTER)
	@$(FORMATTER) $(FORMAT_FLAGS) $(filter %.c,$^)
.PHONY: lint-fix

clang-tidy-info.json: ./scripts/clang-tidy-info.sh ./scripts/linting-line-filter.awk $(shell find -name '*.c')
	@. $<

.clang-tidy: ./scripts/clang-tidy.sh .clang-tidy.in
	. $<

docs/html/index.html: scripts/docgen $(em_SOURCES)
	./scripts/docgen

./scripts/arggen ./scripts/changelog.sh ./scripts/mangen ./scripts/docgen:;

format:
	$(FORMATTER) $(FORMAT_FLAGS) S_FORMATTABLE_SRCS
.PHONY: format

format-check:
	$(FORMAT_CHECKER) $(FORMAT_CHECKER_FLAGS) S_FORMATTABLE_SRCS
.PHONY: format-check

%.Po: em %.$(OBJEXT)

dist_pkgdata_DATA = S_DIST_DATA
EXTRA_DIST = ./em.yml ./src/pp/ignore_warning.h.m4 S_EXTRA_DIST
CLEANFILES = *.log *.swp src/argp.c src/argp.h src/pp/ignore_warning.h ChangeLog em.1 em.1.gz y.tab.h docs/html/ docs/man/ docs/rst/ docs/xml/ docs/_static/css/style.css *.bak GPATH GRTAGS GTAGS d_tags src/parser/*emblem-lexer.c src/parser/*emblem-lexer.h src/parser/*emblem-parser.h src/parser/*emblem-parser.c lex.$(EM_LEX_PREFIX).c emblem-*.tar.* PKGBUILD .clang-tidy clang-tidy-info.json command-line-manual.pdf $(BUILT_SOURCES)
