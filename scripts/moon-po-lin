#!/usr/bin/moon

import open, lines, stderr from io
import exit from os
import rep from string
import concat, insert from table

rc = 0

is_list = (l) ->
	type = type
	if (type l) != 'table'
		return false
	maxk = -1
	for k,_ in pairs l
		if (type k) != 'number'
			return false
		maxk = k if maxk < k
	maxk == #l


show = (v) ->
	switch type v
		when 'boolean', 'nil', 'number', 'thread'
			tostring(v)
		when 'function', 'userdata'
			"(#{tostring(v)})"
		when 'string'
			"'#{v}'"
		when 'table'
			if is_list v
				return '[' .. (concat [ show e for e in *v ], ',') .. ']'
			'{' .. (concat [ (show e) .. ':' .. show val for e,val in pairs v ], ',') .. '}'
			else
				print 'Unknown type', type v

showp = (v) ->
	next = next
	_showp = (v, i) ->
		switch type v
			when 'string'
				v
			when 'table'
				pref = rep '  ', i
				if is_list v
					itm_pref = '\n' .. pref .. '- '
					return itm_pref .. (concat [ _showp e, i + 1 for e in *v ], itm_pref)
				if (next v) == nil
					return '{}'
				else
					return concat [ (tostring k) .. ': ' .. (_showp val, i + 1) for k,val in pairs v ], '\n' .. pref
				else
					show v
	_showp v, 0


file_exists = (fname) ->
	f = open fname
	if f == nil
		return false
	f\close!
	true

get_deps = (fname) ->
	if not file_exists fname
		stderr\write "File '#{fname}' does not exist!\n"
		rc = 1
		return {}

	dep_lines = [ l for l in lines fname when l\match "import.*require" ]
	dep_modules = [ l\match "'(.*)'" for l in *dep_lines ]
	raw_dep_files = [ 'src/ext/lib/' .. (m\gsub "%.", "/") .. '.moon' for m in *dep_modules ]
	existant_dep_files = [ f for f in *raw_dep_files when file_exists f ]
	existant_dep_files

get_deps_po = (files) ->
	po = {}
	for f in *files
		po[f] = get_deps f
	return po

elem = (e, es) ->
	for e2 in *es
		if e == e2
			return true
	false

class File
	new: (@name) =>
		@deps = {}

linearise_po = (po) ->
	nodes = { k, File k for k,_ in pairs po }
	for f,node in pairs nodes
		node.deps = [ nodes[d] for d in *po[f] ]

	src = File nil
	src.deps = [ n for _,n in pairs nodes ]
	nodes['nil'] = src

	dfs = (node) ->
		node.visited = true
		for child in *node.deps
			if child.visited and not child.outputted
				stderr\write "Dependency cycle detected, re-encountered #{child.name} while exploring #{node.name}\n"
				rc = 1
			dfs child if not child.visited
		node.outputted = true
		print node.name if node.name

	dfs src, {}

main = (...) -> linearise_po get_deps_po {...}

main ...
exit rc
