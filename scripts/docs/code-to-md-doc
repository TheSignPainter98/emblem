#!/usr/bin/moon

-- Assumes code is formatted

import open, lines, stderr from io
import mkdir from require 'lfs'
import exit from os
import concat, insert, sort from table
import format from string

known_languages = { 'c', 'moon', 'em' }

arg_parser = (require 'argparse')!
arg_parser\name 'code-to-md-doc'
arg_parser\description 'Translates from emblem source code to docs'
with arg_parser\option '-l --language'
	\description 'The source language to use'
	\default 'c'
with arg_parser\argument 'input_files'
	\description 'File to parse'
	\args '+'
with arg_parser\option '-o --output'
	\description 'Output directory'
	\default 'docs/src/generated'
args = arg_parser\parse!

is_list = (l) ->
	type = type
	if (type l) != 'table'
		return false
	maxk = -1
	for k,_ in pairs l
		if (type k) != 'number'
			return false
		maxk = k if maxk < k
	maxk == #l

show = (v) ->
	switch type v
		when 'boolean', 'nil', 'number', 'thread'
			tostring(v)
		when 'function', 'userdata'
			"(#{tostring(v)})"
		when 'string'
			"'#{v}'"
		when 'table'
			if is_list v
				return '[' .. (concat [ show e for e in *v ], ',') .. ']'
			'{' .. (concat [ (show e) .. ':' .. show val for e,val in pairs v ], ',') .. '}'
			else
				print 'Unknown type', type v

elem = (v, vs) ->
	for _,v2 in pairs vs
		if v == v2
			return true
	false

read_file = => with {:insert} \insert line for line in lines @

list_tags = { 'param', 'example' }

sanitise_links = (txt) ->
	txt = txt\gsub '(%[[^%]]+%][^([])', '\\%1'
	txt = txt\gsub '(%[[^%]]+%])$', '\\%1'
	txt

class Param
	new: (src) =>
		@param,@desc = src\match '([^%s]*)%s*(.*)'
	__tostring: =>
		"- **Param** `#{@param}`: #{sanitise_links @desc}"

sanitise_content = (tag, content) ->
	content_constructors = { param: Param }
	if constructor = content_constructors[tag]
		constructor content
	else
		return content

parse_doc_src = (src) ->
	ret = {}
	for line in *src
		new_tag,content = line\match '^@([^%s]*)%s*(.*)'
		if new_tag and content
			content = sanitise_content new_tag, content
			if elem new_tag, list_tags
				ret[new_tag] = {} unless ret[new_tag]
				insert ret[new_tag], content
			else
				ret[new_tag] = content
	ret

co_to_list = (c) ->
	ret = {}
	for v in c
		insert ret, v
	ret

doc_types = {}
doc_type_names = {}
class Doc
	@takes_doc: (doc, sig) -> false
	new: (@src, @sig, @sig_lingo, @fsrc, @lnum) =>
		for k,v in pairs @src
			@[k] = v
		@parse_sig!
		@sanitise_brief! if @brief
	unique: false
	__inherited: (cls) =>
		unless doc_type_names[cls.__name]
			insert doc_types, cls
			doc_type_names[cls.__name]
	parse_sig: =>
		switch @sig_lingo
			when 'c'
				@name = @sig\match '%*?([^%s()]+)%)?%('
				@sanitised_sig = @sig
			when 'moon'
				san_name = @sig\gsub '^[^%s]*%.', ''
				@name = san_name\match '^%s*([^%s]+)'
				@sanitised_sig = (san_name\match '[^.(]+') .. (concat (co_to_list @sig\gmatch '(%b()[^>]+>)'), ' ') .. ' ...'
			when 'em'
				@name = @sig\match '^em%.([^%s.]+)'
				dname = @sig\match '^em%.([^=]+) ='
				dsig = @sig\match '%b()%s*%->'
				@sanitised_sig = ".#{dname} = #{dsig} ..."
				@nmand_args, @nopt_args = @sig\match '[^%d]*(%-?%d+),%s*(%-?%d+)'
			else
				stderr\write "Unknown language #{@sig_lingo}\n"
				exit 1
	sanitise_brief: => @brief ..= '.' unless @brief\match '[.?!_*]$'

class HeaderDoc extends Doc

class FileHeaderDoc extends HeaderDoc
	@takes_doc: (doc, sig, language) -> doc.file != nil
	unique: true
	__tostring: =>
		string_parts = {}
		insert string_parts, "# `#{@file}`"
		insert string_parts, ""
		insert string_parts, @brief if @brief
		insert string_parts, ""
		insert string_parts, "- **Author**: #{sanitise_links @author}" if @author
		insert string_parts, "- **Date**: #{sanitise_links @date}" if @date
		insert string_parts, ""
		insert string_parts, "[Source file](https://github.com/TheSignPainter98/emblem/blob/master/#{@fsrc})"
		insert string_parts, ""
		concat string_parts, '\n'

class ModuleHeaderDoc extends HeaderDoc
	@takes_doc: (doc, sig, language) -> doc.module != nil
	unique: true
	__tostring: =>
		string_parts = {}
		insert string_parts, "# `#{@module}`"
		insert string_parts, ""
		insert string_parts, @brief if @brief
		insert string_parts, ""
		insert string_parts, "- **Author**: #{sanitise_links @author}" if @author
		insert string_parts, "- **Date**: #{sanitise_links @date}" if @date
		insert string_parts, ""
		concat string_parts, '\n'

is_instance = (cls, obj) ->
	return true if cls == type obj
	return false if 'table' != type obj
	mt = getmetatable obj
	return false if mt == nil
	cls = cls.__name if 'table' == type cls
	ocls = mt.__class
	return false if ocls == nil
	while ocls.__name != cls
		ocls = ocls.__parent
		return false if ocls == nil
	return ocls != nil and ocls.__name == cls

class FuncDoc extends Doc
	@takes_doc: (doc, sig, language) ->
		switch language
			when 'c', 'moon'
				(sig\match '%(') or (sig\match '=>') or sig\match '->'
			when 'em'
				false
			else
				stderr\write "Unsupported language when checking the function type: #{language}\n"
				exit 1
	__tostring: =>
		string_parts = {}
		insert string_parts, "## `#{@name}`" -- (https://github.com/TheSignPainter98/emblem/blob/master/#{@file}##{@lnum})"
		insert string_parts, sanitise_links @brief if @brief
		if @param
			insert string_parts, concat [ tostring p for p in *@param ], '\n'
		if @['return']
			insert string_parts, "**Returns**: #{sanitise_links @['return']}"
		else
			unsert_string_parts, "**Returns**: _none_"
		insert string_parts, "```#{@sig_lingo}\n#{@sanitised_sig}\n```\n"
		concat string_parts, '\n\n'

class DirectiveDoc extends Doc
	@takes_doc: (doc, sig, language) -> (language == 'em') and sig\match '^em%.'
	__tostring: =>
		string_parts = {}
		insert string_parts, "## `.#{@name}`"
		insert string_parts, sanitise_links @brief if @brief
		insert string_parts, "**Mandatory args**: #{@n_args_string @nmand_args}"
		insert string_parts, "**Optional args**: #{@n_args_string @nopt_args}"
		if @param
			insert string_parts, concat [ tostring p for p in *@param ], '\n'
		if @['return']
			insert string_parts, "**Returns**: #{sanitise_links @['return']}"
		else
			unsert_string_parts, "**Returns**: _none_"
		insert string_parts, "```moon\n#{@sanitised_sig}\n```\n"
		concat string_parts, '\n\n'
	n_args_string: (n_args) =>
		n_args = tonumber tostring n_args
		if n_args < 0
			"variable"
		elseif n_args == 0
			"none"
		else
			tostring n_args

class FileDoc
	new: (@fsrc, docs) =>
		fst = 0
		@header_doc = nil
		if is_instance HeaderDoc, docs[1]
			fst = 2
			@header_doc = docs[1]
		@body_docs = [ d for d in *docs[fst,] when d and d.name ]
		sort @body_docs, (d,e) -> d.name < e.name
		@file_pretty_name = @fsrc\match '([^/]*)$'

		seen_uniques = {}
		for doc in *docs
			doc_type = doc.__class
			if doc_type.unique and seen_uniques[doc_type.__name]
				stderr\write "Duplicate unique block: #{doc_type.__name}\n"
				exit 1
			elseif doc_type.unique
				seen_uniques[doc_type.__name] = true
	__tostring: =>
		ret_parts = {}
		if @header_doc
			insert ret_parts, tostring @header_doc
		else
			insert ret_parts, "# `#{@file_pretty_name}`"
			insert ret_parts, "This module lacks a documentation header."
			insert ret_parts, ""
			insert ret_parts, "[Source file](https://github.com/TheSignPainter98/emblem/blob/master/#{@fsrc})"
			stderr\write "Warning: #{@fsrc} does not have a file doc header\n"

		if #@body_docs != 0
			insert ret_parts, tostring body_doc for body_doc in *@body_docs
		else
			insert ret_parts, "<center><i>This module does not contain any documented interface items.</i></center>"
		concat ret_parts, '\n'

trim = => @match '^%s*(.*)%s*$'
trim_doc_line = =>
	m, _ = @gsub '^%s*%-%-', ''
	m, _ = m\gsub '^%s*%*', ''
	m, _ = m\gsub '^%s*', ''
	m

try_parse_doc_type = (doc_type, parsed_doc, curr_signature, language, file, lnum) ->
	return nil unless doc_type.takes_doc parsed_doc, curr_signature, language
	doc_type parsed_doc, curr_signature, language, file, lnum

file_ext_languages = {
	c: 'c'
	h: 'c'
	moon: 'moon'
}

make_dirs = (dname) ->
	curr_dir = ''
	for ds in dname\gmatch '([^/\\]+)[/\\]'
		curr_dir ..= "#{ds}/"
		d = open curr_dir, 'r'
		unless d
			mkdir curr_dir
		else
			d\close!

for file in *args.input_files
	docs = {}
	file_doc = nil
	curr_doc_src = nil
	ext = file\match '%.(.*)$'
	language = file_ext_languages[ext]
	lnum = 0
	for line in *read_file file
		lnum += 1
		if line\match '^%s*$'
			curr_doc_str = nil
		elseif (line\match '^%s*/%*%*') or line\match '^%s*%-%-%-'
			curr_doc_src = {}
		elseif (line\match '^%s*%*') or line\match '^%s*%-%-'
			insert curr_doc_src, trim_doc_line line if curr_doc_src
		elseif line\match '^%s*%*/'
			continue
		elseif curr_doc_src
				curr_signature = trim line
				parsed_doc = parse_doc_src curr_doc_src
				for doc_type in *doc_types
					if doc = try_parse_doc_type doc_type, parsed_doc, curr_signature, language, file, lnum
						insert docs, doc
						break
				curr_doc_src = nil

	out_str = tostring FileDoc file, docs
	out_file = "#{args.output}/#{file\match '^src/(.*)'}.md"
	make_dirs out_file\match '.*[/\\]'
	f = open out_file, 'w+'
	unless f
		print "Error: Could not output to file #{out_file}"
		continue
	with f
		\write out_str
		\close!
-- TODO: record the source, add links to the original!
