name: emblem
program: em
check_deps:
  - name: criterion
    func_check: criterion_run_all_tests
    minver: 2.3.2
deps:
  - name: lua
    func_check: lua_newtable
    minver: 5.4.3
  - name: libcss
    func_check: css_select_style
    minver: 0.9.1
  - name: libsass
    func_check: sass_make_data_context
    minver: 3.6.4
  - name: ncurses
    func_check: has_colors
    minver: 6.2.20200212
  # - name: libblocksruntime # For running with `clang -fblocks` on non-Darwin systems
    # func_check: _NSConcreteGlobalBlock
    # minver: UNKNOWN
description: A minimalist, format-agnostic typesetter
version: S_PKGVER
date: S_PKGDATE
bugs: Please file any bugs or issues at <github.com/TheSignPainter98/emblem/issues>
bug_report_address: https://github.com/TheSignPainter98/emblem/issues
seeAlso:
  - name: pdflatex
    manLocation: 1
  - name: groff
    manLocation: 1
longDescription: >
  Takes input of a markdown-like document, processes it and typesets it before passing the result to a driver for outputting in some format.
  Extensions can be used to include arbitrary functionality; device drivers are also extensions.
author: Edward Jones
author_note: This is maintained by Edward Jones, source code is available at <github.com/TheSignPainter98/emblem>
examples:
  - input: em -Tutf8 example.em
  - input: em hello
args:
  - type: help
    short: -h
    long: --help
    help: Display this help message and exit
  - type: version
    short: -V
    long: --version
    help: Display version and license information and exit
  - dest: input_file
    metaDest: file
    type: char*
    doc: Input file
    default: '-'
    help: File to typeset or `-` to read from stdin.
  - dest: output_stem
    metaDest: stem
    short: -o
    long: --output-to
    type: char*
    default: ''
    help: Name of the output file without file-extension. If left unspecified the input file (with its extension removed) is used, otherwise _emdoc_.
    doc: Holds the output file stem
  - dest: fatal_warnings
    short: -E
    long: --fatal-warnings
    help: Treat warnings as errors
    doc: Make warnings fatal
    type: flag
    default: false
  - dest: colourise_output
    short: -C
    long: --colourise-output
    help: Specify output colourisation, -1 for none, 1 for always, 0 for auto-detect (default is 0)
    doc: Force colourisation on (when = 1) or off (when = -1) or detect (when = 0)
    type: int
    choices:
      - -1
      - 0
      - 1
    default: 0
  - dest: extensions
    short: -x
    long: --extension
    metaDest: extension
    help: Specify an extension to load. When used multiple times, the specified extensions are loaded in the order given.
    type: List
  - dest: extension_args
    short: -a
    long: --ext-arg
    metaDest: extension.param=value
    help: Pass parameter _param_ with value _value_ to extension _ext_
    type: List
  - dest: driver
    short: -T
    long: --to
    metaDest: driver
    help: Set the output driver, default is _html_
    doc: The specified output driver
    type: char*
    default: html
  - dest: input_driver
    short: -F
    long: --from
    metaDest: driver
    help: Set the input driver, if none is specified, the emblem parser is used
    doc: The specified input driver
    type: char*
    default: ''
  - dest: style
    short: -c
    long: --class
    type: char*
    metaDest: style
    default: article
    help: Set the output class
    doc: Holds the root style
  - dest: default_typeface
    short: -f
    long: --font-family
    metaDest: family
    type: char*
    help: Specify a default font family
    doc: Holds the default font to use; ignored iff equal to \"\"
    default: ""
  - dest: default_font_size
    short: -S
    long: --font-size
    type: double
    metaDest: size
    help: Specify the default font size
    doc: Specifies the default font size, ignored iff equal to `0`
    default: 0
  - dest: verbose
    short: -v
    long: --verbose
    type: int
    help: set output verbosity, _3_ outputs everything, _0_ suppresses all messages including errors. Default is _1_.
    default: 1
    choices:
      - 0
      - 1
      - 2
      - 3
    doc: Output verbosity
    metaDest: verbosity
  - dest: sandbox_lvl
    short: -s
    long: --sandbox-level
    type: int
    default: 1
    choices:
      - 0
      - 1
      - 2
    help: Restrict access to the system, _0_ makes no restrictions, _1_ restricts creation of new subprocesses, _2_ restricts uses all level _1_ restrictions and prevents file system access. Default is _1_.
    doc: Restrict some dangerous operations, `0` = no restrictions, higher values place more.
  - dest: tab_size
    short: -t
    long: --tab-size
    type: int
    default: 4
    help: The assumed size of tabs when reading input files
    doc: The taken equivalent size in spaces of a single tab
  - dest: max_iters
    short: -M
    long: --max-iters
    type: int
    default: 4
    help: Max number of typesetting iterations allowed
    doc: Maximum number of permissible typesetting iterations
  - dest: debug_scss_sources
    short: -d
    long: --debug-scss
    help: Include debugging information in preprocessed CSS output
    doc: Include debugging information in libsass output
    type: flag
    default: false
  - dest: config
    short: -@
    long: --load-config
    help: Load document settings from a file
    doc: Document config file location
    type: char*
    default: 'emdoc.yml'
env_vars:
  - name: EM_STYLE_PATH
    desc: >
      Base search path used when processing SASS/SCSS input files.
      Colons are used as delimiters
dist:
  aur:
    depends:
      - glibc
      - libcss
      - libsass
      - lua
      - lua-argparse
      # - lua-htmlparser
      - lua-lpeg
      - lua-lyaml
      - ncurses
    make-depends:
      - gcc
      - moonscript
    check-depends:
      - bash-bats
      - criterion
    opt-depends:
      - otf-bodoni
      - otf-jost
