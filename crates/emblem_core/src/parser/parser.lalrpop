use crate::parser::{
	LexicalError,
	Location,
	lexer::Tok,
	point::Point,
};
use crate::ast::{
    parsed::{
		Attr,
		Attrs,
		Content,
		MultiLineComment,
		MultiLineCommentPart,
		ParsedFile,
		Sugar,
	},
	Par, ParPart,
};
use crate::FileContentSlice;

grammar;

pub File: ParsedFile = {
    FileContent => <>.into(),
};

FileContent: Vec<Par<ParPart<Content>>> = {
	MaybeSepList<Par, par_break>
}

Par: Par<ParPart<Content>> = {
	ParPart+ => <>.into(),
}

ParPart: ParPart<Content> = {
	<MaybeLineContent> "\n" => ParPart::Line(<>),

	<l:@L> <name:CommandName> <attrs:Attrs?> <inline_args:("{" <MaybeLineContent> "}")*> ":" "\n" <trail_head:Indented<FileContent>> <trail_tail:("::" "\n" <Indented<FileContent>>)*> <r:@R> => {
		ParPart::Command(Content::Command {
			qualifier: name.0,
			name: name.1,
			pluses: name.2,
			attrs,
			inline_args,
			remainder_arg: None,
			trailer_args: {
				let mut args = vec![trail_head];
				args.extend(trail_tail);
				args
			},
			loc: Location::new(&l, &r),
			invocation_loc: name.3,
		})
	},
}

MaybeLineContent: Vec<Content> = {
	LineContent? => <>.unwrap_or_default()
}

LineContent: Vec<Content> = {
	LineElement+,
	Shebang => vec![<>],
	HeadingLine => vec![<>],
	<mut content:LineElement*> <tail:RemainderCommand> => {
		content.push(tail);
		content
	},
}

Shebang: Content = {
	<l:@L> <shebang:shebang> <r:@R> => Content::Shebang {
		text: shebang,
		loc: Location::new(&l, &r),
	},
};

HeadingLine: Content = {
	<l:@L> <marker:HeadingMarker> <standoff:whitespace> <arg:LineContent> <r:@R> => Content::Sugar(Sugar::Heading{
		level: marker.0,
		pluses: marker.1,
		arg,
		standoff,
		loc: Location::new(&l, &r),
		invocation_loc: marker.2,
	}),
}

HeadingMarker: (usize, usize, Location) = {
	<l:@L> <h:heading> <r:@R> => (h.0, h.1, Location::new(&l, &r)),
}

RemainderCommand: Content = {
	<l:@L> <name:CommandName> <attrs:Attrs?> <inline_args:("{" <MaybeLineContent> "}")*> <remainder_arg:(":" <LineContent>)> <r:@R> => Content::Command {
		qualifier: name.0,
		name: name.1,
		pluses: name.2,
		attrs,
		inline_args,
		remainder_arg: Some(remainder_arg),
		trailer_args: Vec::with_capacity(0),
		loc: Location::new(&l, &r),
		invocation_loc: name.3,
	}
}

CommandName: (Option<FileContentSlice>, FileContentSlice, usize, Location) = {
	<l:@L> <command:command> <r:@R> => (command.0.map(Into::into), command.1.into(), command.2.into(), Location::new(&l, &r)),
}

LineElement: Content = {
	<l:@L> <comment:comment>       <r:@R> => Content::Comment{ comment, loc: Location::new(&l, &r) },
	<l:@L> <content:NestedComment> <r:@R> => Content::MultiLineComment{ content, loc: Location::new(&l, &r) },
	<l:@L> <whitespace:whitespace> <r:@R> => Content::Whitespace{ whitespace, loc: Location::new(&l, &r) },
	<l:@L> <word:word>             <r:@R> => Content::Word{ word: word.into(), loc: Location::new(&l, &r) },
	<l:@L> <dash:dash>             <r:@R> => Content::Dash{ dash: dash.into(), loc: Location::new(&l, &r) },
	<l:@L> <glue:glue>             <r:@R> => Content::Glue{ glue: glue.into(), loc: Location::new(&l, &r) },
	<l:@L> <raw:spilt_glue>        <r:@R> => Content::SpiltGlue{ raw, loc: Location::new(&l, &r) },
	<l:@L> <verbatim:verbatim>     <r:@R> => Content::Verbatim{ verbatim, loc: Location::new(&l, &r) },

	<l:@L> <mark:mark>             <r:@R> => Content::Sugar(Sugar::Mark{ mark, loc: Location::new(&l, &r) }),
	<l:@L> <reference:reference>   <r:@R> => Content::Sugar(Sugar::Reference{ reference, loc: Location::new(&l, &r) }),

	EmphSugar,

	<l:@L> <name:CommandName> <attrs:Attrs?> <inline_args:("{" <MaybeLineContent> "}")*> <r:@R> => Content::Command {
		qualifier: name.0,
		name: name.1,
		pluses: name.2,
		attrs,
		inline_args,
		remainder_arg: None,
		trailer_args: Vec::with_capacity(0),
		loc: Location::new(&l, &r),
		invocation_loc: name.3,
	},
}

EmphSugar: Content = {
	<l:@L> <delimiter:italic_open> <arg:LineElement+> italic_close <r:@R> => Content::Sugar(
		Sugar::Italic{
			delimiter,
			arg,
			loc: Location::new(&l, &r),
		},
	),
	<l:@L> <delimiter:bold_open> <arg:LineElement+> bold_close <r:@R> => Content::Sugar(
		Sugar::Bold{
			delimiter,
			arg,
			loc: Location::new(&l, &r),
		},
	),
	<l:@L> monospace_open <arg:LineElement+> monospace_close <r:@R> => Content::Sugar(
		Sugar::Monospace{
			arg,
			loc: Location::new(&l, &r),
		},
	),
	<l:@L> smallcaps_open <arg:LineElement+> smallcaps_close <r:@R> => Content::Sugar(
		Sugar::Smallcaps{
			arg,
			loc: Location::new(&l, &r),
		},
	),
	<l:@L> alternate_face_open <arg:LineElement+> alternate_face_close <r:@R> => Content::Sugar(
		Sugar::AlternateFace{
			arg,
			loc: Location::new(&l, &r),
		},
	),
}

Attrs: Attrs = {
	<l:@L> "[" <attrs:MaybeSepList<Attr, ",">> "]" <r:@R> => Attrs::new(attrs, Location::new(&l, &r)),
}

Attr: Attr = {
	<l:@L> <attr:named_attr> <r:@R> => Attr::named(attr, Location::new(&l, &r)),
	<l:@L> <attr:unnamed_attr> <r:@R> => Attr::unnamed(attr, Location::new(&l, &r)),
};

NestedComment: MultiLineComment = {
	"/*" <NestedCommentContent> "*/"
}

NestedCommentContent: MultiLineComment = {
	<NestedCommentPart*> => MultiLineComment(<>),
}

NestedCommentPart: MultiLineCommentPart = {
	"\n"          => MultiLineCommentPart::Newline,
	comment       => MultiLineCommentPart::Comment(<>),
	NestedComment => MultiLineCommentPart::Nested(<>),
}

SepList<T,Sep>: Vec<T> = {
	<head:T> <mut tail:MaybeSepList<T,Sep>> => {
		let mut ret = vec![head];
		ret.append(&mut tail);
		ret
	}
}

MaybeSepList<T, Sep>: Vec<T> = {
	<mut init:(<T> Sep)*> <last:T?> => match last {
		None => init,
		Some(e) => {
			init.push(e);
			init
		}
	},
}

Indented<T>: T = {
	indent <MaybeIndented<T>> dedent,
}

MaybeIndented<T>: T = {
	T,
	indent <MaybeIndented<T>> dedent,
}

extern {
	type Location = Point;
	type Error = Box<LexicalError>;

	enum Tok {
		shebang              => Tok::Shebang(<FileContentSlice>),
		indent               => Tok::Indent,
		dedent               => Tok::Dedent,
		":"                  => Tok::Colon,
		"::"                 => Tok::DoubleColon,
		"{"                  => Tok::LBrace,
		"}"                  => Tok::RBrace,
		command              => Tok::Command {
									qualifier: <Option<FileContentSlice>>,
									name: <FileContentSlice>,
									pluses: <usize>
								},
		italic_open          => Tok::ItalicOpen(<FileContentSlice>),
		bold_open            => Tok::BoldOpen(<FileContentSlice>),
		monospace_open       => Tok::MonospaceOpen(<FileContentSlice>),
		smallcaps_open       => Tok::SmallcapsOpen(<FileContentSlice>),
		alternate_face_open  => Tok::AlternateFaceOpen(<FileContentSlice>),
		italic_close         => Tok::ItalicClose,
		bold_close           => Tok::BoldClose,
		monospace_close      => Tok::MonospaceClose,
		smallcaps_close      => Tok::SmallcapsClose,
		alternate_face_close => Tok::AlternateFaceClose,
		heading              => Tok::Heading {
									level: <usize>,
									pluses: <usize>
								},
		mark                 => Tok::Mark(<FileContentSlice>),
		reference            => Tok::Reference(<FileContentSlice>),
		par_break            => Tok::ParBreak,
		word                 => Tok::Word(<FileContentSlice>),
		dash                 => Tok::Dash(<FileContentSlice>),
		glue                 => Tok::Glue(<FileContentSlice>),
		spilt_glue           => Tok::SpiltGlue(<FileContentSlice>),
		verbatim             => Tok::Verbatim(<FileContentSlice>),
		whitespace           => Tok::Whitespace(<FileContentSlice>),
		"["                  => Tok::LBracket,
		"]"                  => Tok::RBracket,
		","                  => Tok::AttrComma,
		named_attr           => Tok::NamedAttr(<FileContentSlice>),
		unnamed_attr         => Tok::UnnamedAttr(<FileContentSlice>),
		"/*"                 => Tok::NestedCommentOpen,
		"*/"                 => Tok::NestedCommentClose,
		"\n"                 => Tok::Newline { .. },
		comment              => Tok::Comment(<FileContentSlice>),
	}
}
